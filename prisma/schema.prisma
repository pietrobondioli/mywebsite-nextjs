generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    refresh_token_expires_in Int?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id])

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id])

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Comment       Comment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Article {
    id            String    @id @default(cuid())
    slug          String
    lang          String
    title         String
    published_at  DateTime
    last_modified DateTime
    author_name   String
    excerpt       String    @db.Text
    image_url     String
    image_alt     String
    content       String    @db.LongText
    comments      Comment[]
    category      String
}

model Comment {
    id         String    @id @default(cuid())
    content    String
    parent_id  String?
    parent     Comment?  @relation("CommentToComment", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    replies    Comment[] @relation("CommentToComment")
    article_id String
    article    Article   @relation(fields: [article_id], references: [id])
    author_id  String
    author     User      @relation(fields: [author_id], references: [id])

    @@index([parent_id])
    @@index([article_id])
    @@index([author_id])
}
